{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Baburaj\\\\hyundaidashboard\\\\src\\\\components\\\\graphs.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst data = {\n  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n  datasets: [{\n    data: [12, 19, 3, 5, 2, 3],\n    backgroundColor: ['#002C5F'],\n    borderColor: ['#002C5F'],\n    borderWidth: 1\n  }]\n}; //const myRef = React.createRef();\n\nconst lineOptions = {\n  onClick: (e, element) => {\n    if (element.length > 0) {\n      var ind = element[0]._index;\n      alert(ind);\n    }\n  },\n  plugins: {\n    legend: {\n      display: false,\n      tickMarkLength: false\n    }\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {}\n    }],\n    yAxes: [{\n      // stacked: true,\n      gridLines: {\n        show: false\n      },\n      ticks: {\n        beginAtZero: true,\n\n        userCallback(value) {\n          value = value.toString();\n          value = value.split(/(?=(?:...)*$)/); // Convert the array to a string and format the output\n\n          value = value.join(\".\");\n          return `Rp.${value}`;\n        }\n\n      }\n    }]\n  },\n  legend: {\n    display: false\n  }\n};\n\nconst VerticalBar = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(Line, {\n    data: data,\n    options: lineOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this)\n}, void 0, false);\n\n_c = VerticalBar;\nexport default VerticalBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerticalBar\");","map":{"version":3,"sources":["C:/Users/Baburaj/hyundaidashboard/src/components/graphs.js"],"names":["React","Line","data","labels","datasets","backgroundColor","borderColor","borderWidth","lineOptions","onClick","e","element","length","ind","_index","alert","plugins","legend","display","tickMarkLength","scales","xAxes","gridLines","yAxes","show","ticks","beginAtZero","userCallback","value","toString","split","join","VerticalBar"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;;;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADG;AAEXC,EAAAA,QAAQ,EAAE,CACR;AACEF,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CADR;AAEEG,IAAAA,eAAe,EAAE,CACf,SADe,CAFnB;AAKEC,IAAAA,WAAW,EAAE,CACX,SADW,CALf;AASEC,IAAAA,WAAW,EAAE;AATf,GADQ;AAFC,CAAb,C,CAkBA;;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AACvB,QAAIA,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtB,UAAIC,GAAG,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWG,MAArB;AACAC,MAAAA,KAAK,CAACF,GAAD,CAAL;AACD;AACF,GANe;AAQhBG,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE;AACJC,MAAAA,OAAO,EAAE,KADL;AAEJC,MAAAA,cAAc,EAAE;AAFZ;AADH,GARO;AAehBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,SAAS,EAAE;AADb,KADK,CADD;AAQNC,IAAAA,KAAK,EAAE,CACL;AACE;AACAD,MAAAA,SAAS,EAAE;AACTE,QAAAA,IAAI,EAAE;AADG,OAFb;AAQEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAE,IADR;;AAGLC,QAAAA,YAAY,CAACC,KAAD,EAAQ;AAClBA,UAAAA,KAAK,GAAGA,KAAK,CAACC,QAAN,EAAR;AACAD,UAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,eAAZ,CAAR,CAFkB,CAIlB;;AACAF,UAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,GAAX,CAAR;AACA,iBAAQ,MAAKH,KAAM,EAAnB;AACD;;AAVI;AART,KADK;AARD,GAfQ;AA+ChBX,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH;AA/CQ,CAApB;;AAoDA,MAAMc,WAAW,GAAG,mBAClB;AAAA,yBAEE,QAAC,IAAD;AAAM,IAAA,IAAI,EAAE9B,IAAZ;AAAkB,IAAA,OAAO,EAAEM;AAA3B;AAAA;AAAA;AAAA;AAAA;AAFF,iBADF;;KAAMwB,W;AAON,eAAeA,WAAf","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst data = {\r\n  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n  datasets: [\r\n    {\r\n      data: [12, 19, 3, 5, 2, 3],\r\n      backgroundColor: [\r\n        '#002C5F',\r\n      ],\r\n      borderColor: [\r\n        '#002C5F',\r\n\r\n      ],\r\n      borderWidth: 1,\r\n    },\r\n  ],\r\n};\r\n\r\n\r\n//const myRef = React.createRef();\r\nconst lineOptions = {\r\n    onClick: (e, element) => {\r\n      if (element.length > 0) {\r\n        var ind = element[0]._index;\r\n        alert(ind);\r\n      }\r\n    },\r\n\r\n    plugins: {\r\n        legend: {\r\n            display: false,\r\n            tickMarkLength: false,\r\n\r\n        }\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n           \r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          // stacked: true,\r\n          gridLines: {\r\n            show: false\r\n\r\n\r\n\r\n          },\r\n          ticks: {\r\n            beginAtZero: true,\r\n         \r\n            userCallback(value) {\r\n              value = value.toString();\r\n              value = value.split(/(?=(?:...)*$)/);\r\n  \r\n              // Convert the array to a string and format the output\r\n              value = value.join(\".\");\r\n              return `Rp.${value}`;\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    legend: {\r\n      display: false\r\n    }\r\n  };\r\n\r\nconst VerticalBar = () => (\r\n  <>\r\n\r\n    <Line data={data} options={lineOptions} />\r\n  </>\r\n);\r\n\r\nexport default VerticalBar;"]},"metadata":{},"sourceType":"module"}